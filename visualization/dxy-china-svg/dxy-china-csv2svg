#!/usr/bin/env php
<?php
error_reporting(E_ERROR);

# check for an argument
if(!isset($argv[1])) { 
 print "ERROR: no argument provided.\n";
 usage();
}

# validate first argument is a readable file
if(!is_file($argv[1])) {
 print "ERROR: '" . $argv[1] . "' is not a file.\n";
 usage();
}
else if(!is_readable($argv[1])) {
 print "ERROR: '" . $argv[1] . "' is not readable.\n";
 usage();
}

# get data
$path = $argv[1];
$data = `cat $path`;

# store output file name
$output_file_name = $path;
$output_file_name = preg_replace('/\..*?$/','',$path) . '.svg';

# get svg
$svgpath = dirname(__FILE__) . '/blank.svg';
$svg = `cat $svgpath`;
if(strlen($svg)==0) {
 print "ERROR: Unable to read SVG\n";
 exit(2);
}

# now process data
$lines = explode("\n",$data);
$dateline = '(Unknown date/time)';

# line-wise
foreach($lines as $line) {
 # first, discard comments
 if($line[0] != '#') {
  # now obtain info
  list($province_name,$cases,$deaths) = explode('|',$line);
  if($province_name != '') {
   print "province '$province_name' had $cases cases and $deaths deaths.\n";
   $threshold = 100;
   $threshold2 = 200;
   $threshold3 = 500;
   $threshold4 = 1000;

#   ######## OLD ALGORITHM: GENERATE RED LEVEL #####################################################
#   # cases shows as red, which is $threshold is fully red, anything less is less
#   #  so $threshold and above = ff
#   #  0 = 00
#   # .. so all numbers must be reduced to that range.
#   if($cases>=$threshold) { $red = 'ff'; } else { $red = dechex(256 * ($cases/$threshold)); }
#   if(strlen($red) == 1) { $red = "0" . $red; }
#
#   # grey if no data
#   if($cases == 0) { 
#    $red = 'e3';
#    $green = 'e3';
#    $blue = 'e3'; 
#   }
#   else {
#    $green = '00';
#    $blue = '00';
#   }
#   $fill = '#' . $red.$green.$blue;
#   ###########################################################################################

   # new algorithm: generate opacity
   $fill = '#ff0000';
   $opacity = $cases/$threshold;
   if($opacity>1) { $opacity=1; }

   # addition for latest algorithm:
   #  1. "generate opacity for values < $threshold" (above),
   #  2. "otherwise 100% opacity and set colors for subsequent thresholds" (this code)
   if($cases>$threshold2) { $fill = '#aa0000'; }
   if($cases>$threshold3) { $fill = '#550000'; }
   if($cases>$threshold4) { $fill = '#000000'; }

   # replace in SVG
   $svg = preg_replace('/id="' . $province_name . '"/','id="'.$province_name.'" style="fill-opacity:'.$opacity.';fill:'.$fill.';" cases="'.$cases.'" deaths="'.$deaths.'"',$svg);
# WAS .... .$red.$green.$blue.';" cases="'.$cases.'" deaths="'.$deaths.'"',$svg);

   print " (cases $cases generated red level '$red' / opacity '$opacity')\n";
  }
 }
 else {
  # line starts with '#' so may be updated date
  if(preg_match('/^# update: (.*)$/',$line,$matches)) {
   $dateline = $matches[1];
  }
 }
}

# update title
$svg = preg_replace('/SUBTITLE/',$dateline,$svg);
$svg = preg_replace('/TITLE/','COVID-19 Confirmed Cases',$svg);
$svg = preg_replace('/NOTES1/','Open source data visualization',$svg);
$svg = preg_replace('/NOTES2/','https://github.com/globalcitizen/2019-wuhan-coronavirus-data',$svg);
$svg = preg_replace('/BOX1/','Over ' . $threshold . ' confirmed cases',$svg);
$svg = preg_replace('/BOX2/','Over ' . $threshold2 . ' confirmed cases',$svg);
$svg = preg_replace('/BOX3/','Over ' . $threshold3 . ' confirmed cases',$svg);
$svg = preg_replace('/BOX4/','Over ' . $threshold4 . ' confirmed cases',$svg);

# now output SVG
file_put_contents($output_file_name,$svg);

# usage
function usage() {
 global $argv;
 print "usage:\n";
 print "  " . basename($argv[0]) . " <dxy-derived-csv-file>\n";
 print "     <dxy-derived-csv-file>  A CSV file that has been prepared by the 'process-dxy' tool.\n";
 exit(1);
}

?>
